// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: TclLexer.flex

package com.propergentleman.tickle;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.propergentleman.tickle.psi.TclTypes;
import com.intellij.psi.TokenType;


class TclLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\2\6\1\0\1\12\1\13"+
    "\2\6\1\0\1\6\1\0\1\6\12\14\1\15\1\0"+
    "\3\6\2\0\32\16\1\17\1\20\1\21\1\22\1\16"+
    "\1\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\16\1\34\1\35\1\16\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\16\1\51\1\22\1\52\1\6\6\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\4\1\1\4\2\1\13\4"+
    "\1\1\1\5\2\0\2\6\1\7\2\0\1\10\2\0"+
    "\1\11\10\4\1\12\7\4\3\0\1\7\1\0\10\4"+
    "\1\12\10\4\1\5\1\13\4\4\1\12\5\4\2\0"+
    "\1\14\4\4\1\14\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\53\0\201\0\53\0\254\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\53\0\u03dd\0\327\0\53\0\u0408\0\u0433\0\u045e"+
    "\0\u012d\0\53\0\u0489\0\u0183\0\53\0\u04b4\0\u04df\0\u050a"+
    "\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u0158\0\u060c\0\u0637"+
    "\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u03b2\0\u0739\0\254"+
    "\0\53\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0a6a"+
    "\0\u0c6e\0\53\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0a6a\0\u0d45";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\3\2\1\13\1\14\1\15\1\2"+
    "\1\6\1\13\1\16\1\17\1\20\1\21\1\22\2\13"+
    "\1\23\4\13\1\24\1\13\1\25\1\26\1\27\2\13"+
    "\1\30\1\13\1\31\1\2\54\0\1\3\2\0\1\3"+
    "\50\0\1\4\57\0\1\32\10\0\1\33\32\0\2\34"+
    "\1\35\2\0\1\36\45\34\16\0\1\37\4\0\26\37"+
    "\1\40\1\0\13\41\1\42\37\41\14\0\1\13\1\43"+
    "\1\13\4\0\26\13\2\0\21\44\1\45\31\44\2\0"+
    "\1\4\2\0\1\5\61\0\1\13\1\43\1\13\4\0"+
    "\17\13\1\46\6\13\16\0\1\13\1\43\1\13\4\0"+
    "\1\47\13\13\1\50\11\13\16\0\1\13\1\43\1\13"+
    "\4\0\4\13\1\51\21\13\16\0\1\13\1\43\1\13"+
    "\4\0\12\13\1\52\10\13\1\53\1\13\1\54\16\0"+
    "\1\13\1\43\1\13\4\0\14\13\1\55\11\13\16\0"+
    "\1\13\1\43\1\13\4\0\5\13\1\56\20\13\16\0"+
    "\1\13\1\43\1\13\4\0\1\57\16\13\1\60\6\13"+
    "\16\0\1\13\1\43\1\13\4\0\4\13\1\61\21\13"+
    "\16\0\1\13\1\43\1\13\4\0\4\13\1\62\17\13"+
    "\1\63\1\13\16\0\1\13\1\43\1\13\4\0\7\13"+
    "\1\64\16\13\16\0\1\13\1\43\1\13\4\0\7\13"+
    "\1\65\16\13\2\0\51\66\1\67\1\32\2\0\1\70"+
    "\14\0\4\70\32\0\1\35\64\0\1\37\1\0\1\37"+
    "\4\0\26\37\2\0\52\40\1\71\15\0\1\72\51\0"+
    "\1\13\1\43\1\13\4\0\4\13\1\73\21\13\16\0"+
    "\1\13\1\43\1\13\4\0\20\13\1\74\1\75\4\13"+
    "\16\0\1\13\1\43\1\13\4\0\13\13\1\76\12\13"+
    "\16\0\1\13\1\43\1\13\4\0\5\13\1\77\20\13"+
    "\16\0\1\13\1\43\1\13\4\0\20\13\1\100\5\13"+
    "\16\0\1\13\1\43\1\13\4\0\1\101\25\13\16\0"+
    "\1\13\1\43\1\13\4\0\15\13\1\102\10\13\16\0"+
    "\1\13\1\43\1\13\4\0\17\13\1\103\6\13\16\0"+
    "\1\13\1\43\1\13\4\0\2\13\1\104\23\13\16\0"+
    "\1\13\1\43\1\13\4\0\14\13\1\105\11\13\16\0"+
    "\1\13\1\43\1\13\4\0\16\13\1\106\2\13\1\107"+
    "\4\13\16\0\1\13\1\43\1\13\4\0\21\13\1\56"+
    "\4\13\16\0\1\13\1\43\1\13\4\0\10\13\1\110"+
    "\15\13\16\0\1\13\1\43\1\13\4\0\4\13\1\111"+
    "\12\13\1\112\6\13\16\0\1\13\1\43\1\13\4\0"+
    "\10\13\1\113\15\13\2\0\52\67\1\114\16\0\1\115"+
    "\4\0\26\115\16\0\1\13\1\43\1\13\4\0\1\116"+
    "\25\13\16\0\1\13\1\43\1\13\4\0\4\13\1\56"+
    "\21\13\16\0\1\13\1\43\1\13\4\0\2\13\1\117"+
    "\23\13\16\0\1\13\1\43\1\13\4\0\21\13\1\120"+
    "\4\13\16\0\1\13\1\43\1\13\4\0\1\121\25\13"+
    "\16\0\1\13\1\43\1\13\4\0\4\13\1\122\21\13"+
    "\16\0\1\13\1\43\1\13\4\0\12\13\1\56\13\13"+
    "\16\0\1\13\1\43\1\13\4\0\17\13\1\56\6\13"+
    "\16\0\1\13\1\43\1\13\4\0\4\13\1\123\21\13"+
    "\16\0\1\13\1\43\1\13\4\0\11\13\1\124\14\13"+
    "\16\0\1\13\1\43\1\13\4\0\2\13\1\56\23\13"+
    "\16\0\1\13\1\43\1\13\4\0\22\13\1\125\3\13"+
    "\16\0\1\13\1\43\1\13\4\0\22\13\1\126\3\13"+
    "\16\0\1\13\1\43\1\13\4\0\21\13\1\75\4\13"+
    "\16\0\1\13\1\43\1\13\4\0\13\13\1\56\12\13"+
    "\16\0\1\13\1\43\1\13\4\0\14\13\1\127\11\13"+
    "\16\0\1\13\1\43\1\13\4\0\12\13\1\74\13\13"+
    "\2\0\51\130\1\131\1\132\14\0\1\115\1\43\1\115"+
    "\4\0\26\115\16\0\1\13\1\43\1\13\4\0\11\13"+
    "\1\56\14\13\16\0\1\13\1\43\1\13\4\0\7\13"+
    "\1\56\16\13\16\0\1\13\1\43\1\13\4\0\10\13"+
    "\1\133\15\13\16\0\1\13\1\43\1\13\4\0\22\13"+
    "\1\134\3\13\16\0\1\13\1\43\1\13\4\0\10\13"+
    "\1\23\15\13\16\0\1\13\1\43\1\13\4\0\1\75"+
    "\25\13\16\0\1\13\1\43\1\13\4\0\1\135\25\13"+
    "\16\0\1\13\1\43\1\13\4\0\10\13\1\136\15\13"+
    "\16\0\1\13\1\43\1\13\4\0\17\13\1\111\6\13"+
    "\16\0\1\13\1\43\1\13\4\0\24\13\1\56\1\13"+
    "\2\0\52\131\1\137\14\0\1\13\1\43\1\13\4\0"+
    "\13\13\1\140\12\13\16\0\1\13\1\43\1\13\4\0"+
    "\12\13\1\62\13\13\16\0\1\13\1\43\1\13\4\0"+
    "\6\13\1\74\17\13\16\0\1\13\1\43\1\13\4\0"+
    "\17\13\1\74\6\13\16\0\1\13\1\43\1\13\4\0"+
    "\22\13\1\74\3\13\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3440];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\23\1\1\11"+
    "\2\0\1\11\2\1\2\0\1\11\2\0\1\11\20\1"+
    "\3\0\1\11\1\0\35\1\2\0\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TclLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 13: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 14: break;
          case 3:
            { return TclTypes.OPERATOR;
            }
          // fall through
          case 15: break;
          case 4:
            { return TclTypes.COMMAND;
            }
          // fall through
          case 16: break;
          case 5:
            { return TclTypes.STRING;
            }
          // fall through
          case 17: break;
          case 6:
            { return TclTypes.COMMENT;
            }
          // fall through
          case 18: break;
          case 7:
            { return TclTypes.VARIABLE;
            }
          // fall through
          case 19: break;
          case 8:
            { return TclTypes.PAREN;
            }
          // fall through
          case 20: break;
          case 9:
            { return TclTypes.BRACKET;
            }
          // fall through
          case 21: break;
          case 10:
            { return TclTypes.KEYWORD;
            }
          // fall through
          case 22: break;
          case 11:
            { return TclTypes.NAMESPACE;
            }
          // fall through
          case 23: break;
          case 12:
            { return TclTypes.BLOCK;
            }
          // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
